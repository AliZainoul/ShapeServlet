<?xml version="1.0" encoding="UTF-8"?>
<!-- Maven Project Object Model (POM) -->
<project 
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- Specify the model version -->
  <modelVersion>4.0.0</modelVersion>

  <!-- Define project properties -->
  <properties>
    <!-- Set the Java version for compilation -->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <!-- Set the project's source encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- Specify versions for Maven plugins -->
    <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
    <maven.resources.plugin.version>3.2.0</maven.resources.plugin.version>
    <!-- Define other properties here -->
    <shape.project.url>http://localhost:8080/ShapeProjectSP</shape.project.url>
    <shape.project.server>ShapeProjectSP</shape.project.server>
  </properties>

  <!-- Define the project's group ID, artifact ID, version, packaging, name, and URL -->
  <groupId>com.ccc.shape</groupId>
  <artifactId>ShapeProjectSP</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>Shape Project SP</name>
  <url>${shape.project.url}</url>

  <!-- Define project dependencies -->
  <dependencies>
    <!-- Servlet API -->
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <version>5.0.0</version>
      <scope>provided</scope>
    </dependency>
    <!-- JSP API -->
    <dependency>
      <groupId>jakarta.servlet.jsp</groupId>
      <artifactId>jakarta.servlet.jsp-api</artifactId>
      <version>3.0.0</version>
    </dependency>
    <!-- Doxia Core -->
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-core</artifactId>
      <version>1.9</version>
    </dependency>
    <!-- Doxia Site Renderer -->
    <dependency>
      <groupId>org.apache.maven.doxia</groupId>
      <artifactId>doxia-site-renderer</artifactId>
      <version>2.0.0-M10</version>
    </dependency>
    <!-- JUnit dependency -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>5.8.0</version>
      <scope>test</scope>
    </dependency>
    <!-- Mockito dependency -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>4.2.0</version>
      <scope>test</scope>
    </dependency>
    <!-- Add other dependencies here -->
  </dependencies>


  <!-- Configure the build -->
  <build>
    <!-- Specify the final name for the artifact -->
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <!-- Maven Compiler Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin.version}</version>
        <configuration>
          <!-- Set the Java version for compilation -->
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
          <!-- Set the source encoding -->
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <!-- Maven Resources Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven.resources.plugin.version}</version>
        <configuration>
          <!-- Set the resources encoding -->
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <!-- Maven WAR Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.3.2</version>
        <configuration>
          <!-- Set the war source directory -->
          <warSourceDirectory>src/main/webapp</warSourceDirectory>
          <!-- Do not fail if web.xml is missing -->
          <failOnMissingWebXml>false</failOnMissingWebXml>
          <webResources>
            <resource>
              <directory>${project.basedir}/target/site</directory>
              <targetPath>/docs</targetPath>
            </resource>
          </webResources>
        </configuration>
      </plugin>
      <!-- Maven Site Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.7.1</version>
      </plugin>
      <!-- Maven Deploy Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <!-- Specify the repository ID for deployment -->
          <repositoryId>${shape.project.server}</repositoryId>
          <!-- Specify the URL for deployment -->
          <url>${shape.project.url}</url>
          <!-- Use the HTTP client wagon provider -->
          <wagonProvider>httpclient</wagonProvider>
        </configuration>
        <dependencies>
          <!-- Dependency for HTTP wagon provider -->
          <dependency>
            <groupId>org.apache.maven.wagon</groupId>
            <artifactId>wagon-http</artifactId>
            <version>3.4.3</version>
          </dependency>
        </dependencies>
      </plugin>
      <!-- Maven Project Info Reports Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.1.0</version>
      </plugin>
      <!-- Plugin for compiling and executing tests -->
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.0.0-M5</version>
          <configuration>
              <includes>
                  <include>**/*Test.java</include> <!-- Include all test classes ending with Test.java -->
              </includes>
          </configuration>
      </plugin>
      <!-- Tomcat Maven Plugin -->
      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <!-- Specify the Tomcat server ID -->
          <server>${shape.project.server}</server>
          <!-- Specify the URL for the project -->
          <url>http://localhost:8080/manager/text</url>
          <!-- Specify the context path for the application -->
          <path>/${project.artifactId}</path>
          <!-- Specify the location of the generated WAR file -->
          <warFile>${project.build.directory}/${project.build.finalName}.war</warFile>
        </configuration>
      </plugin>
      <!-- Add other plugins here -->
    </plugins>
  </build>

  <!-- Configure repositories -->
  <repositories>
    <!-- Maven Central Repository -->
    <repository>
      <id>central</id>
      <url>https://repo.maven.apache.org/maven2</url>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
  </repositories>
</project>
